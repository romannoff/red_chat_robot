import gradio as gr
from db_handler.db_handler import Database
from langchain_openai import ChatOpenAI
from langchain.schema import HumanMessage, AIMessage
from config import Config


settings = Config.from_yaml("config.yaml")

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
db = Database(db_name=settings.db_name)


def get_qwery(messages_list):
    """
    –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.
    :param messages_list: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :return: –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM
    """
    langchain_messages = []
    for msg in reversed(messages_list):
        if msg["role"] == "user":
            langchain_messages.insert(0, HumanMessage(content=msg["content"]))
        elif msg["role"] == "assistant":
            langchain_messages.insert(0, AIMessage(content=msg["content"]))

    return langchain_messages


def chat(msg, history):
    context = db.get_history(chat_id=current_chat_id.value, size=20)

    user_msg = {"role": "user", "content": msg}
    system_msg = {"role": "system", "context": settings.system}

    context.insert(0, system_msg)
    context.append(user_msg)

    qwery = get_qwery(context)

    answer = llm.invoke(qwery)
    answer = answer.content

    db.insert(chat_id=current_chat_id.value, role='user', msg_text=msg)
    db.insert(chat_id=current_chat_id.value, role='assistant', msg_text=answer)

    return answer


def clear_history():
    db.clear_history(current_chat_id.value)


def get_chat_interface(chat_id):
    history = [
        {'role': msg['role'], 'metadata': None, 'content': msg['content'], 'options': None}
        for msg in db.get_history(chat_id)
    ]

    return gr.ChatInterface(
        fn=chat,
        type="messages",
        chatbot=gr.Chatbot(value=history, type="messages"),
        # title="Chat Botü§ñ",
    )


def process_api_key(api_key):
    global llm
    llm = ChatOpenAI(
        model_name=settings.model_name,
        openai_api_base=settings.url,
        openai_api_key=api_key,
    )


current_chat_id = gr.State(value=0)

with gr.Blocks() as demo:
    with gr.Row():
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å
        with gr.Column(scale=3):
            iface = gr.Interface(
                fn=process_api_key,
                inputs=gr.Textbox(label="API Key", type="password"),
                outputs=None,
            )
            pass
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
        with gr.Column(scale=7):
            with gr.Tabs() as tabs:
                with gr.Tab("–ß–∞—Ç 1"):
                    get_chat_interface(chat_id=0)
                with gr.Tab("–ß–∞—Ç 2"):
                    get_chat_interface(chat_id=1)
            clear_btn = gr.Button("–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")
            clear_btn.click(fn=clear_history, inputs=None, outputs=None)

            # create_btn = gr.Button("–¥–æ–±–∞–≤–∏—Ç—å")
            # create_btn.click(fn=add_table, inputs=[], outputs=)


    def on_tab_select():
        current_chat_id.value = (current_chat_id.value + 1) % 2

    tabs.select(
        fn=on_tab_select,
    )

# with gr.Blocks() as demo:
#     chatbot = gr.ChatInterface(
#         fn=chat,
#         type="messages",
#         title="Chat Botü§ñ",
#     )
#     chatbot.render()
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
#     with gr.Row():
#         clear_btn = gr.Button("–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")
#
#     # –°–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
#     clear_btn.click(fn=clear_history, inputs=None, outputs=gr.Textbox(visible=False))


llm = None


def main():
    demo.queue().launch(server_name="0.0.0.0", server_port=7860)


if __name__ == "__main__":
    main()
